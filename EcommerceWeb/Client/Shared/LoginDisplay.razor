@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<AuthorizeView>
    <Authorized>
        <div class="justify-content-end">
            
            <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Secondary" >Hello, @context.User.Identity?.Name</MudChip>
            @*<a href="authentication/profile" style="color:violet">Hello, @context.User.Identity?.Name!</a>*@
            <MudChip Icon="@Icons.Material.Filled.Logout" Color="Color.Secondary" OnClick="BeginSignOut">Log Out</MudChip>
                
            
            
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="justify-content-end"> 
            @*<a href="authentication/register" style="color:antiquewhite">Register</a>*@
            <MudChip Icon="@Icons.Material.Filled.AppRegistration" Color="Color.Info" OnClick="@(() => Navigation.NavigateTo("authentication/register"))">Register</MudChip>
            <MudChip Icon="@Icons.Material.Filled.Login" Color="Color.Success" OnClick="@(() => Navigation.NavigateTo("authentication/login"))">Login</MudChip>
            
            @*<a href="authentication/login" style="color:antiquewhite">Log in</a>*@
        </div>
    </NotAuthorized>
</AuthorizeView>

@code{
        [CascadingParameter]
    public bool Rtl { get; set; }

    //bool openStart = false;
    bool openEnd = false;



    void ToggleEndDrawer()
    {
        openEnd = !openEnd;
    }
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
}
